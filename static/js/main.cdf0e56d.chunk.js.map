{"version":3,"sources":["components/TodoItem.js","components/Counter.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","todo","handleDelete","handleToggle","Table","Row","positive","completed","Cell","Checkbox","checked","onChange","title","Button","color","icon","floated","compact","size","onClick","Counter","state","counter","setState","this","React","Component","headers","TodoApp","todos","newTodo","fetchTodos","fetch","then","data","json","catch","err","console","error","handleToggleAll","allToggled","Promise","all","map","id","method","body","JSON","stringify","handleNewTodoKeyDown","event","length","keyCode","preventDefault","value","trim","handleClearCompleted","completedTodos","filter","handleInputChange","bind","target","every","className","placeholder","autoFocus","onKeyDown","htmlFor","style","display","Header","HeaderCell","Body","i","key","handleTodoClick","Footer","fullWidth","colSpan","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kVAKaA,EAAW,SAAAC,GAAU,IACtBC,EAAqCD,EAArCC,KAAMC,EAA+BF,EAA/BE,aAAcC,EAAiBH,EAAjBG,aAC5B,OACA,kBAACC,EAAA,EAAMC,IAAP,CACIC,SAAUL,EAAKM,WACf,kBAACH,EAAA,EAAMI,KAAP,KACI,kBAACC,EAAA,EAAD,CACIC,QAAST,EAAKM,UACdI,SAAYR,KAGpB,kBAACC,EAAA,EAAMI,KAAP,KACKP,EAAKW,MACN,kBAACC,EAAA,EAAD,CACIC,MAAM,SACNC,KAAK,QACLC,QAAQ,QACRC,SAAO,EACPC,KAAK,SACLC,QAAUjB,OCHXkB,E,4MAlBXC,MAAQ,CACJC,QAAS,G,uDAGJ,IAAD,OACJ,OACI,4BACIH,QAAS,WACL,EAAKI,UAAS,SAAAF,GAAK,MAAK,CAChBC,QAASD,EAAMC,QAAU,QAHzC,oBAOkBE,KAAKH,MAAMC,QAP7B,c,GAPUG,IAAMC,WCKtBC,EAAU,CACZ,eAAgB,oBA+KLC,E,kDAtKX,WAAY5B,GAAO,IAAD,8BACd,cAAMA,IANVqB,MAAQ,CACJQ,MAAO,GACPC,QAAS,IAGK,EAUtBC,WAAa,WACTC,MAAM,UACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAJ,GAAK,OAAI,EAAKN,SAAS,CAAEM,aAC9BO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAM,CAACF,YAdX,EAiBtBG,gBAAkB,SAAAC,GAAe,IACtBZ,EAAS,EAAKR,MAAdQ,MACPa,QAAQC,IAAId,EAAMe,KAAI,SAAA3C,GAAI,OAAI+B,MAAM,UAAD,OAAW/B,EAAK4C,IAAM,CACrDC,OAAQ,QACRnB,UACAoB,KAAMC,KAAKC,UAAU,CAAC1C,WAAYkC,UAGpCR,KAAK,EAAKF,YACXK,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAM,CAACF,YA1BX,EA8CtBa,qBAAuB,SAAAC,GACnB,KAAI,EAAK9B,MAAMQ,MAAMuB,QAAU,KAKV,KAAlBD,EAAME,QAAT,CAIAF,EAAMG,iBAVsB,MAYH,EAAKjC,MAAvBS,EAZqB,EAYrBA,QACDyB,GAbsB,EAYZ1B,MACFC,EAAQ0B,QACnBD,GACCvB,MAAM,SAAU,CACZc,OAAQ,OACRnB,UACAoB,KAAMC,KAAKC,UAAU,CACjBrC,MAAO2C,EACPhD,WAAW,MAGlB0B,KAAK,EAAKF,YACVE,MAAK,kBAAM,EAAKV,SAAS,CAACO,QAAS,UAtEtB,EA0EtB5B,aAAe,SAAA2C,GACXb,MAAM,UAAD,OAAWa,GAAK,CACjBC,OAAQ,SACRnB,YACDM,KAAK,EAAKF,aA9EK,EAkFtB0B,qBAAuB,WAAO,IAEpBC,EADY,EAAKrC,MAAfQ,MACqB8B,QAAO,SAAA1D,GAAI,OAAIA,EAAKM,aACjDmC,QAAQC,IAAIe,EAAed,KAAI,SAAA3C,GAAI,OAC/B+B,MAAM,UAAD,OAAW/B,EAAK4C,IAAK,CAC1BC,OAAQ,SACRnB,gBAEDM,KAAK,EAAKF,aAxFT,EAAK6B,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAFX,E,gEAOlBrC,KAAKO,e,sCAsBO9B,GAAO,IACZ4C,EAAiB5C,EAAjB4C,GAAItC,EAAaN,EAAbM,UACXyB,MAAM,UAAD,OAAWa,GAAM,CAClBC,OAAQ,QACRnB,UACAoB,KAAMC,KAAKC,UAAU,CAAC1C,WAAYA,MACnC0B,KAAKT,KAAKO,c,wCAMCoB,GACd,IAAMI,EAAQJ,EAAMW,OAAOP,MAC3B/B,KAAKD,SAAS,CAACO,QAASyB,M,+BAqDlB,IAAD,SACoB/B,KAAKH,MAAvBQ,EADF,EACEA,MACDY,GAFD,EACSX,QACKD,EAAMkC,OAAM,SAAA9D,GAAI,OAAIA,EAAKM,cAC5C,OACI,yBAAKyD,UAAY,kBACb,kBAAC,EAAD,MACA,2BACInB,GAAG,WACHmB,UAAU,WACVC,YAAY,yBACZC,WAAS,EACTX,MAAO/B,KAAKH,MAAMS,QAClBnB,SAAYa,KAAKoC,kBACjBO,UAAa3C,KAAK0B,uBAEtB,2BACIkB,QAAQ,WACRC,MAAO,CAAEC,QAAS,SAFtB,YAMkB,IAAjBzC,EAAMuB,OAEP,kBAAChD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAMmE,OAAP,KACI,kBAACnE,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMoE,WAAP,0BAOZ,kBAACpE,EAAA,EAAD,KACI,kBAACA,EAAA,EAAMmE,OAAP,KACA,kBAACnE,EAAA,EAAMC,IAAP,KACA,kBAACD,EAAA,EAAMoE,WAAP,KACI,kBAAC/D,EAAA,EAAD,CAAUC,QAAW+B,EAAY9B,SAAY,kBAAM,EAAK6B,gBAAgBC,SAI5E,kBAACrC,EAAA,EAAMqE,KAAP,KACKjD,KAAKH,MAAMQ,MAAMe,KAAI,SAAC3C,EAAMyE,GAAP,OAClB,kBAAC,EAAD,CACIC,IAAKD,EACLzE,KAAQA,EACRE,aAAc,kBACV,EAAKyE,gBAAgB3E,EAAMyE,IAE/BxE,aAAc,kBACV,EAAKA,aAAaD,EAAK4C,WAKvC,kBAACzC,EAAA,EAAMyE,OAAP,CAAcC,WAAS,GACnB,kBAAC1E,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMoE,WAAP,CAAkBO,QAAQ,KACtB,kBAAClE,EAAA,EAAD,CAAQK,KAAM,QAAQC,QAASK,KAAKiC,sBAApC,4B,GAhKNhC,IAAMC,WC+CbsD,E,uKARP,OACI,yBAAKhB,UAAY,OACb,kBAAC,EAAD,W,GAJEvC,IAAMC,WCpCJuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,kBACb,EADa,MAEbC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEd1D,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMwD,c","file":"static/js/main.cdf0e56d.chunk.js","sourcesContent":["import {Table, Checkbox, Button } from 'semantic-ui-react';\r\nimport React from 'react';\r\n\r\n//can also restructure props immediately\r\n//const TodoItem = ({todo, handleDelete, handleToggle}) => {\r\nexport const TodoItem = props => {\r\n    const { todo, handleDelete, handleToggle } = props\r\n    return (\r\n    <Table.Row  \r\n        positive={todo.completed}>\r\n        <Table.Cell>\r\n            <Checkbox \r\n                checked={todo.completed}\r\n                onChange = {handleToggle}\r\n            />\r\n        </Table.Cell>\r\n        <Table.Cell>\r\n            {todo.title}\r\n            <Button\r\n                color=\"orange\"\r\n                icon=\"trash\"\r\n                floated=\"right\"\r\n                compact\r\n                size=\"medium\"\r\n                onClick={ handleDelete }\r\n \r\n            />\r\n        </Table.Cell>\r\n    </Table.Row>\r\n    )\r\n}","import React from 'react';\r\n\r\nclass Counter extends React.Component {\r\n    state = {\r\n        counter: 0\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <button \r\n                onClick={() => { \r\n                    this.setState(state => ({\r\n                            counter: state.counter + 1\r\n                        }))\r\n                }}\r\n            >\r\n            You have clicked {this.state.counter} times\r\n            </button>\r\n        )\r\n    }\r\n}\r\nexport default Counter","import {Table, Checkbox, Button } from 'semantic-ui-react';\r\nimport React from 'react';\r\nimport {TodoItem} from './TodoItem';\r\nimport Counter from './Counter';\r\n\r\n//would be good practice to componentize footer, header, input\r\n\r\nconst headers = {\r\n    'Content-Type': 'application/json',    \r\n}\r\n\r\nclass TodoApp extends React.Component {\r\n    state = {\r\n        todos: [],\r\n        newTodo: '',\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.handleInputChange = this.handleInputChange.bind(this,)\r\n    }\r\n\r\n    //lifcycle method, called on mount\r\ncomponentDidMount() {\r\n    this.fetchTodos()\r\n}\r\n\r\nfetchTodos = () => {\r\n    fetch('/todos')\r\n    .then(data => data.json())\r\n    .then(todos => this.setState({ todos }))\r\n    .catch(err => console.error({err}))\r\n}\r\n \r\nhandleToggleAll = allToggled => {\r\n    const {todos} = this.state\r\n    Promise.all(todos.map(todo => fetch(`/todos/${todo.id}`, {\r\n        method: 'PATCH',\r\n        headers,\r\n        body: JSON.stringify({completed: !allToggled})\r\n        }),\r\n    ),\r\n    ).then(this.fetchTodos)\r\n    .catch(err => console.error({err}))\r\n}\r\n\r\nhandleTodoClick(todo) {\r\n    const {id, completed} = todo\r\n    fetch(`/todos/${id}`, {\r\n        method: 'PATCH',\r\n        headers,\r\n        body: JSON.stringify({completed: !completed})\r\n    }).then(this.fetchTodos)\r\n   \r\n}\r\n\r\n//iF do this dont need to bind this in Constructor, but it creates one for each todoapp\r\n//handleInputChange = event => {\r\nhandleInputChange(event){\r\n    const value = event.target.value\r\n    this.setState({newTodo: value}) \r\n}\r\n\r\nhandleNewTodoKeyDown = event => {\r\n    if (this.state.todos.length >= 11){\r\n        //no more than 10 todos in the list\r\n        return\r\n    }\r\n\r\n    if(event.keyCode !== 13){\r\n        //13 is return key\r\n        return\r\n    }\r\n    event.preventDefault()\r\n\r\n    const {newTodo, todos} = this.state\r\n    const value = newTodo.trim()\r\n    if(value){\r\n        fetch('/todos', {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify({\r\n                title: value,\r\n                completed: false,\r\n            }),\r\n        })\r\n        .then(this.fetchTodos)\r\n        .then(() => this.setState({newTodo: ''}))\r\n    }\r\n}\r\n\r\nhandleDelete = id => {\r\n    fetch(`/todos/${id}`,{\r\n        method: 'DELETE',\r\n        headers,        \r\n    }).then(this.fetchTodos)\r\n   \r\n}\r\n\r\nhandleClearCompleted = () => {\r\n    const { todos } = this.state\r\n    const completedTodos = todos.filter(todo => todo.completed)\r\n    Promise.all(completedTodos.map(todo =>\r\n        fetch(`/todos/${todo.id}`,{\r\n        method: 'DELETE',\r\n        headers,        \r\n    }),\r\n    )).then(this.fetchTodos)\r\n  \r\n}\r\n\r\n//function App() {\r\n//    const shouldRender = true\r\nrender() {\r\n    const {todos, newTodo} = this.state\r\n    const allToggled = todos.every(todo => todo.completed)\r\n    return (\r\n        <div className = \"todo-container\">\r\n            <Counter />\r\n            <input \r\n                id=\"new-todo\" \r\n                className=\"new-todo\" \r\n                placeholder=\"What needs to be done?\"\r\n                autoFocus\r\n                value={this.state.newTodo}\r\n                onChange = {this.handleInputChange}\r\n                onKeyDown = {this.handleNewTodoKeyDown}\r\n            />\r\n            <label\r\n                htmlFor=\"new-todo\"\r\n                style={{ display: 'none' }}\r\n            >\r\n                New Todo\r\n            </label>\r\n            {todos.length === 0 ? \r\n            (\r\n            <Table>\r\n                <Table.Header> \r\n                    <Table.Row>\r\n                        <Table.HeaderCell>\r\n                            Nothing to do.\r\n                        </Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n            </Table>\r\n            ) : (\r\n            <Table>\r\n                <Table.Header> \r\n                <Table.Row>\r\n                <Table.HeaderCell>\r\n                    <Checkbox checked = {allToggled} onChange = {() => this.handleToggleAll(allToggled)} />\r\n                </Table.HeaderCell>\r\n                </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {this.state.todos.map((todo, i) => (\r\n                        <TodoItem \r\n                            key={i} \r\n                            todo = {todo} \r\n                            handleToggle={() => \r\n                                this.handleTodoClick(todo, i)\r\n                            }\r\n                            handleDelete={() => \r\n                                this.handleDelete(todo.id)\r\n                            } \r\n                        />            \r\n                    )) }  \r\n                </Table.Body>\r\n                <Table.Footer fullWidth>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell colSpan=\"2\">\r\n                            <Button size =\"small\" onClick={this.handleClearCompleted}>\r\n                                Clear completed\r\n                            </Button>\r\n                        </Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Footer>\r\n            </Table>) }  \r\n        </div> \r\n    \r\n    )\r\n}\r\n}\r\nexport default TodoApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport TodoApp from './components/TodoApp';\n\n\n/*\n<div class=\"app\">\n  <div class=\"todo-container\">\n    <input id=\"new-todo\" />\n    <label for=\"new-todo\">New Todo</label>\n    <div class=\"todo-item-row\">Learn React</div>\n    <div class=\"todo-item-row\">Learn Redux</div>\n    <div class=\"todo-item-row\">Learn React Native</div>\n  </div>\n</div>\n*/ \n\nconst renderTodos = (todos) => {\n    return todos.map((todo, i) => (\n    <div className = \"todo-item-row\" key=\"{i}\">{todo}</div>\n)) }\n\n\n/*  inline styling\nconst TodoItem = props => (\n    <div className = \"todo-item-row\">\n        <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n        }}>{props.children}</div>\n    </div>\n)\n*/\n/* .todo-item-row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n{shouldRender \n            ? 'Render!'\n            : 'Dont render!'}\n            {shouldRender && 'We render'}\nsee also how to do styled-components\n*/\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className = \"app\">\n                <TodoApp />\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <\n    App / > ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}